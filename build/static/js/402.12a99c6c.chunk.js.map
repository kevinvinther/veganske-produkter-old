{"version":3,"file":"static/js/402.12a99c6c.chunk.js","mappings":"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","sources":["components/ProductCard.js","HomePage.js"],"sourcesContent":["import React, { useState, memo } from 'react';\nimport { Card, Tag, Button, Modal } from 'antd';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport 'react-lazy-load-image-component/src/effects/blur.css';\n\n\n\nconst ProductCard = memo(({ product }) => {\n\n        const [visible, setVisible] = useState(false);\n        const [proofVisible, setProofVisible] = useState({});\n        const [image, setImage] = useState(\"\");\n        const [imageVisible, setImageVisible] = useState({});\n        return (\n                <Card\n                        hoverable\n                        style={{ width: \"100%\", borderRadius: \"15px\" }}\n                        cover={\n                                <div\n                                        style={{\n                                                width: \"100%\",\n                                                height: \"150px\",\n                                                overflow: \"hidden\",\n                                                display: \"flex\",\n                                                justifyContent: \"center\",\n                                                alignItems: \"center\",\n                                        }}\n                                >\n                                        <LazyLoadImage\n                                                alt={product.title}\n                                                src={`./assets/${product.image}`}\n                                                placeholderSrc={`${product.image.replace('.jpg', '_compressed.jpg')}`}\n                                                effect=\"blur\"\n                                                style={{\n                                                        width: \"100%\",\n                                                        height: \"100%\",\n                                                        objectFit: \"cover\",\n                                                }}\n                                                onClick={() => {\n                                                        setImageVisible(true);\n                                                        setImage(product);\n                                                }}\n                                        />\n                                        <Modal\n                                                visible={imageVisible && image === product}\n                                                onOk={() => setImageVisible(false)}\n                                                onCancel={() => setImageVisible(false)}\n                                        >\n                                                <LazyLoadImage\n                                                        alt={product.title}\n                                                        src={`./assets/${product.proof_image}`}\n                                                        placeholderSrc={`${product.image.replace('.jpg', '_compressed.jpg')}`}\n                                                        effect=\"blur\"\n                                                        style={{\n                                                                width: \"100%\",\n                                                                height: \"100%\",\n                                                                objectFit: \"cover\",\n                                                        }}\n                                                />\n                                        </Modal>\n                                </div>\n                        }\n                >\n                        <Card.Meta\n                                title={product.title}\n                                description={product.description}\n                        />\n                        <p>\n                                <strong>Kategorier: </strong>\n                                {product.category.map((category, index) => (\n                                        <Tag key={index} color=\"red\">\n                                                {category}\n                                        </Tag>\n                                ))}\n                        </p>\n                        <p>\n                                <strong>Lokationer: </strong>\n                                {product.locations.map((location, index) => (\n                                        <Tag key={index} color=\"blue\">\n                                                {location}\n                                        </Tag>\n                                ))}\n                        </p>\n                        <Button\n                                type=\"primary\"\n                                onClick={() => {\n                                        setVisible(true);\n                                        setProofVisible(product);\n                                }}\n                        >\n                                Bevis\n                        </Button>\n                        <Modal\n                                title=\"Bevis\"\n                                visible={visible && proofVisible === product}\n                                onOk={() => setVisible(false)}\n                                onCancel={() => setVisible(false)}\n                        >\n                                <LazyLoadImage alt=\"\" src={product.proof_image} />\n                                <p>{product.proof_text}</p>\n                        </Modal>\n                </Card>\n        );\n});\n\nexport default ProductCard;\n","import React, { useState } from \"react\";\nimport products from \"./products.json\";\nimport ProductCard from \"./components/ProductCard\";\nimport {\n        Col,\n        Input,\n        Row,\n        Layout,\n        Typography,\n} from \"antd\";\nimport { FixedSizeGrid as Grid } from 'react-window';\n\nimport { SearchOutlined } from \"@ant-design/icons\";\n\n\nconst { Content } = Layout;\nconst { Title } = Typography;\n\nconst HomePage = () => {\n        const [searchTerm, setSearchTerm] = useState(\"\");\n\n\n        const handleSearchChange = (event) => {\n                setSearchTerm(event.target.value);\n        };\n\n        const sortedProducts = products.sort((a, b) =>\n                a.title < b.title ? -1 : a.title > b.title ? 1 : 0\n        );\n\n        const filteredProducts = sortedProducts.filter((product) =>\n                product.title.toLowerCase().includes(searchTerm.toLowerCase())\n        );\n\n        const numOfCols = window.innerWidth > 800 ? 4 : window.innerWidth > 600 ? 2 : 1;\n\n        const Cell = ({ columnIndex, rowIndex, style }) => {\n                const index = rowIndex * numOfCols + columnIndex;\n                const product = filteredProducts[index];\n\n                return (\n                        product ? (\n                                <div style={style}>\n                                        <ProductCard product={product} />\n                                </div>\n                        ) : null\n                );\n        };\n\n\n        return (\n                <Layout>\n                        <Content style={{ padding: \"0px\" }}>\n                                <Title level={2} style={{ textAlign: \"center\", color: \"#595959\" }}>\n                                        Veganske produkter\n                                </Title>\n                                <div\n                                        style={{\n                                                display: \"flex\",\n                                                justifyContent: \"center\",\n                                                marginBottom: \"20px\",\n                                        }}\n                                >\n                                        <Input\n                                                placeholder=\"Search by title\"\n                                                onChange={handleSearchChange}\n                                                prefix={<SearchOutlined />}\n                                        />\n                                </div>\n                                <div\n                                        style={{\n                                                background: \"#fff\",\n                                                padding: 24,\n                                                minHeight: 380,\n                                                borderRadius: \"25px\",\n                                        }}\n                                >\n                                        <Grid\n                                                columnCount={numOfCols}\n                                                columnWidth={window.innerWidth / numOfCols}\n                                                height={500}  // The height of the Grid container\n                                                rowCount={Math.ceil(filteredProducts.length / numOfCols)}\n                                                rowHeight={400}  // The estimated height of each row\n                                                width={numOfCols * 400}  // The width of the Grid container\n                                        >\n                                                {Cell}\n                                        </Grid>\n                                </div>\n                        </Content>\n                </Layout>\n        );\n};\n\nexport default HomePage;\n"],"names":["memo","_ref","product","_useState","useState","_useState2","_slicedToArray","visible","setVisible","_useState3","_useState4","proofVisible","setProofVisible","_useState5","_useState6","image","setImage","_useState7","_useState8","imageVisible","setImageVisible","_jsxs","Card","hoverable","style","width","borderRadius","cover","height","overflow","display","justifyContent","alignItems","children","_jsx","LazyLoadImage","alt","title","src","concat","placeholderSrc","replace","effect","objectFit","onClick","Modal","onOk","onCancel","proof_image","description","category","map","index","Tag","color","locations","location","Button","type","proof_text","Content","Layout","Title","Typography","searchTerm","setSearchTerm","filteredProducts","products","a","b","filter","toLowerCase","includes","numOfCols","window","innerWidth","padding","level","textAlign","marginBottom","Input","placeholder","onChange","event","target","value","prefix","SearchOutlined","background","minHeight","Grid","columnCount","columnWidth","rowCount","Math","ceil","length","rowHeight","columnIndex","rowIndex","ProductCard"],"sourceRoot":""}